#summary While nobody may have asked these questions, it's still nice to know the answer if you were wondering.

= inxi FAQs =

Some things are not obvious, so here's a few questions and answers.


== List of Frequently Asked (or 'Could be Asked') Questions ==
-----
===Q: inxi output piped to 'more' looks weird===

If I use *more* to give convenient screen height blocks of output
{{{
inxi <options> | more
}}} 
the lines don't wrap correctly, long lines get shoved to the next line   the terminal/console output, but it's messy.

*A:* That's correct, I noticed this recently when testing long line output in shell. There is nothing I know of that can fix this for 'more', what is happening, I think, is that "more" is ignoring the color code characters when calculating the line width, instead of just using the width of the actual text as it handles the length of each line. In other words, if the output is 100 characters, *more* thinks that the output is actually 100+all the characters of the color code variables, which will then make the bad wraps as more tries to handle that. I had no idea *more* could create this type of issue, but apparently it can. 

The solution in this case is to set the inxi colors to -c 0, for example: 
{{{
inxi -v7 -c 0
}}}
Then the output will wrap neatly as intended since there are no longer any color code characters in the physical string. This is useful to remember if you are out of X, in a terminal with very narrow width, for example default 80 columns.

My feeling is that this may be a bug in *more* but you never know, it could be intended behavior, but why anyone would intend to break the output of a line is beyond me.
-----
===Q: Does inxi support BSDs?===
*A:* Yes, sort of. FreeBSD support is decent though incomplete. OpenBSD support is weaker, because each BSD insists on using its own set of tools, that have different syntaxes, so trying to actually support the BSDs completely is essentially impossible, at least if you want a life. 

To see what works in your BSD flavor, just run:
{{{
inxi -rfv7
}}}
This triggers almost everything in inxi. Then you can see what is supported, what needs root, and what is not supported in your BSD flavor. Each line should tell you if it supports BSD or not. 

I spent quite a while working on BSD support but in the end, I decided I'd just try to make sure basic functionality works on FreeBSD, and after that, I don't really care about the other BSDs. The user base for each is simply too small and fragmented to warrant any more dev time. The core functions do more or less work in some cases. For example, -R works for zfs raid, very well. But some things you just can't get easily from BSDs at all as regular user, and I don't like adding too many things that require root to get data for. 

As of 2014-03-16 -s does not work, no lm-sensors type app in BSDs, -D does not work, -d does not work, -o does not work. -M works with dmidecode as root. 

In general now inxi is not going to get much more dev time for BSDs, but I will spend time maintaining current support in FreeBSD (since the FreeBSD/PCBSD family is the largest, this makes it the logical one to support most completely). I don't see any huge rush to adopt inxi among BSD users, but stranger things have happened. 

Patches are accepted as long as they are coherent. 

Speaking only for myself, my time looking at the (in my opinion) overly large range of differences and variations between each BSD convinced me that getting these differences handled more completely is a bad way to spend my finite time, and it would pointless bloat out the inxi code for almost no gain to probably 99.99% of people who use inxi. Overall, BSD support was an interesting experiment, and it's nice seeing it run on FreeBSD servers, but I doubt it will go a lot further than it is now, unless it's easy to just include BSD support for new features.
-----