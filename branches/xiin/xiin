#!/usr/bin/env python

#    author: Scott Rogers
#    stability: alpha
#    copying: 'Copyright (C) 2011 W. Scott Rogers
#              This program is free software.
#              You can redistribute it and/or modify it under the terms of the
#              GNU General Public License as published by the Free Software Foundation;
#              version 2 of the License.
#
#   Special thanks: h2, aka Harald Hope

import os
import sys
import optparse

def main(xiinArg):

    checkPython()

    xiinDesc = """ xiin is a directory parser meant to help debug inxi(www.inxi.org) bugs.
        xiin will take a given directory, usually /sys or /proc and write the contents
        to a specified file in key:value format where key is the directory/filename
        and value is the contents of key."""

    xiinUsage   = "%prog [-d] <directory to read> [-f] <file to write>"

    xiinVersion = "%prog 2011.05.08-alpha"

#    defaultFile = os.environ['HOME'] + '/xiin.txt'
#    defaultDir = '/sys'
#    defaultDisplay = False

    dirHelp     = 'directory containing files'
    fileHelp    = 'if used write report to file, otherwise write output to the screen'
    displayHelp = 'prints to terminal not to a file.  Cannot use with -f option'

    parser = optparse.OptionParser(description = xiinDesc, usage = xiinUsage, version = xiinVersion)

    parser.add_option('-d', '--directory', dest = 'directory', help = dirHelp)
    parser.add_option('-f', '--file', dest = 'filename', help = fileHelp)
    parser.add_option('-o', '--out', action = 'store_true', dest = 'display', help = displayHelp)

    (option, args) = parser.parse_args()

    xiinSwitch(option, xiinArg)

    exit(0)
#end

def xiinSwitch(option, xiinArg):
    """ Traffic director """
# no arguements specified, so display helpful error
    if len(xiinArg) < 2:
        parser.error('Nothing to do. Try option -h or --help.')
        exit(2)

# no output specified
    elif option.filename is None and option.display is None:
        parser.error('specify a file or display outpu')
        exit(3)

# reading /proc will hang system for a while, it's a big deep virtual-directory
    elif option.directory == '/proc':
        parser.error('xiin can not walk /proc')
        exit(4)

# the directory needed when option used
    elif option.directory is None:
        parser.error('xiin needs a directory')
        exit(5)

# only display output
    elif option.display is True and option.filename is None:
        print('Starting xiin...')
        print('')
        displayXiinInfo(option.display, option.directory)

# only write output
    elif option.display is None and option.filename is not None:
        print('Starting xiin...')
        print('')
        print('Using options: ' + str(option))
        print('')
        writeXiinInfo(option.display, option.filename, option.directory)
#end

def checkPython():
    """ Detects Python compatibility.  Python 2.6+ required """
    print('Detecting Python version...')
    print('')
    if sys.hexversion < 0x02060000:
        print('Incorrect Python version: 2.6+ is required')
        exit(1)
    else:
        return
#end

def displayXiinInfo(display, directory):
    """ Opens the write file and directs the walker, also displays output """
    print("Getting info")
    print('')

    for root, dirs, files in os.walk(directory):
	for file in files:
	    xiinOpenFile(display, root, file, None)
#end

def writeXiinInfo(display, xiinFile, directory):
    """ Opens the write file and directs the walker, also displays output """
    print("Getting info")
    print('')

    with open(xiinFile, 'w') as outputFile:
	xiinDirectoryWalker(directory, display, outputFile)
#end

def xiinDirectoryWalker(directory, display, outputFile):
    """ Walks the directory """

    count = 1
    
    for root, dirs, files in os.walk(directory):
	for file in files:
	    if int(count%25) > 4:
		count = 1
	    busySpinner(count)
	    count = count + 1
	    xiinOpenFile(display, root, file, outputFile)
#end

def xiinOpenFile(display, root, file, outputFile):
    """ Opens a file and prep to read """

    fullPathFile = os.path.join(root, file)
    
    try:
	if os.stat(fullPathFile).st_size:
	    try:
		with open(fullPathFile, 'r') as someFile:
		    xiinReadFileContents(display, root, file, someFile, outputFile)
	    except IOError:
		pass
    except:
	pass
#end

def xiinReadFileContents(display, root, fileName, someFile, outputFile):
    """ Read file contents and either display them or write them to a file """
    try:
	contents = someFile.readlines()
    except:
	pass

    if display:
	print('file: ' + os.path.join(root, fileName) + ':' + str(contents))
    else:
	outputFile.writelines('file: ' + os.path.join(root, fileName) + ':' + str(contents) + '\n')
#end

def busySpinner(count):
    """ Displays a busy spinner"""
    spinner = [ ' -\\- ', ' -|- ', ' -/- ', ' --- ']

    if (int(count%25) == 1) or (int(count%25) == 2) or (int(count%25) == 3) or (int(count%25) == 4):
        print(spinner[count%25 - 1]),
        sys.stdout.flush()
        sys.stdout.write('\r')
#end

if __name__ == '__main__':
    main(sys.argv)
#end